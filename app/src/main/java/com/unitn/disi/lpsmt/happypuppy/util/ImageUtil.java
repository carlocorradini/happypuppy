package com.unitn.disi.lpsmt.happypuppy.util;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.util.Log;

import androidx.annotation.DrawableRes;
import androidx.core.content.ContextCompat;

import com.unitn.disi.lpsmt.happypuppy.App;

import java.io.IOException;
import java.net.URI;
import java.net.URL;

/**
 * Image utility class
 *
 * @author Carlo Corradini
 */
public final class ImageUtil {
    /**
     * Return the {@link Bitmap image} identified by given id from {@link Drawable} resource
     *
     * @param id The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.
     * @return {@link Bitmap image} identified by given id from {@link Drawable} resource
     */
    public static Bitmap fromDrawable(@DrawableRes int id) {
        Drawable drawable = ContextCompat.getDrawable(App.getContext(), id);
        if (drawable == null) return null;

        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);

        return bitmap;
    }

    /**
     * Return the {@link Bitmap image} identified by given id resized from {@link Drawable} resource
     *
     * @param id     The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.
     * @param width  The new bitmap's desired width.
     * @param height The new bitmap's desired height.
     * @return {@link Bitmap image} identified by given id from {@link Drawable} resource resized
     */
    public static Bitmap fromDrawable(@DrawableRes int id, int width, int height) {
        Bitmap bitmap = fromDrawable(id);
        return bitmap != null ? Bitmap.createScaledBitmap(bitmap, width, height, false) : null;
    }

    /**
     * Download an {@link Bitmap image} given the {@link URL url}.
     * This class must be constructed with a {@link OnTaskCompleted<Bitmap> listener} function when
     * the {@link Bitmap image} has been downloaded.
     * The downloaded {@link Bitmap image} can be null if an error occurs.
     *
     * @author Carlo Corradini
     */
    public static final class DownloadImage extends AsyncTask<URI, Void, Bitmap> {
        /**
         * {@link Log} TAG of this class
         */
        private static final String TAG = DownloadImage.class.getName();

        /**
         * Callback listener called when the download operation has finished
         */
        private OnTaskCompleted<Bitmap> listener;

        /**
         * Image width if scaled
         */
        private Integer width;

        /**
         * Image height if scaled
         */
        private Integer height;

        /**
         * Construct a {@link DownloadImage} class with a finish callback {@link OnTaskCompleted<Bitmap> listener}
         * and resize the image with the given width & height
         *
         * @param listener The callback listener called when the {@link Bitmap image} has been download
         * @param width    Width of the downloaded {@link Bitmap image} resized
         * @param height   Height of the downloaded {@link Bitmap image} resized
         */
        public DownloadImage(OnTaskCompleted<Bitmap> listener, Integer width, Integer height) {
            this.listener = listener;
            this.width = width;
            this.height = height;
        }

        /**
         * Construct a {@link DownloadImage} class with a finish callback {@link OnTaskCompleted<Bitmap> listener}
         *
         * @param listener The callback listener called when the {@link Bitmap image} has been download
         */
        public DownloadImage(OnTaskCompleted<Bitmap> listener) {
            this(listener, null, null);
        }

        @Override
        protected Bitmap doInBackground(URI... uris) {
            if (uris == null || uris.length == 0 || uris[0] == null) return null;
            Bitmap image = null;

            try {
                image = BitmapFactory.decodeStream(uris[0].toURL().openConnection().getInputStream());

                if (width != null && height != null) {
                    image = Bitmap.createScaledBitmap(image, width, height, false);
                }

                Log.i(TAG, "Successfully downloaded image at " + uris[0]);
            } catch (IOException e) {
                Log.e(TAG, "Unable to download image due to " + e.getMessage(), e);
            }

            return image;
        }

        @Override
        protected void onPostExecute(Bitmap image) {
            listener.onTaskCompleted(image);
        }
    }
}
